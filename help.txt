ОБЩЕЕ ОПИСАНИЕ С ЗАДАЧАМИ
-------------------------

Точка входа - main.js, где мы задаём настройки игры, в частности список сцен.
Сцена - это игровое окно/процесс. Предлагаю создать три сцены:
- главный экран (Start.js),
- сама игра (Game.js), 
- окно окончания игры (GameOver.js).

1. На главном экране предлагаю добавить следующее:
- кнопка начала игры,
- включение/выключение музыки,
- добавление элементов управления (для мобильных браузеров(это поможет не париться со считыванием ориентации экрана и сэкономит время)),
- информация о разработчиках (?).
Задачи, связанные с этой сценой:
- поиск шрифта,
- вёрстка блока с меню, включая кнопки и подключение шрифта,
- поиск музыки,
- подключение музыки,
- функционал кнопки включения/выключения музыки,
- функционал кнопки добавления элементов управления,
- информация о разработчиках (?):
  - красиво оформить
  - красиво добавить
- переход на следующую сцену при нажатии на кнопку начала игры

2. Игра.
Игра - простое движение фигурки по экрану. Физика блоков простая, нужно просто запретить им быть прозрачными для фигурки.
Предложения от меня:
- движение камеры вправо, чтобы игрок всегда бежал, а не стоял на месте
  и, соответственно, запрет на движение влево за границу экрана
  (можно добавить лазер или просто обрушивать блоки за границей вьюпорта слева)
- нужен счётчик. Можно добавить сбор предметов или считать пройденные блоки
- можно добавить препятствия, замедляющие игрока
- автоматическое построение карты. Зададим алгоритм, по которому блоки будут уничтожаться слева
  за границей вьюпорта и появляться справа по описанной логике
- в связи с предыдущим пунктом может возникнуть ситуация, при которой блоков на карте будет слишком много, или они будут неудобно
  рамположены. Поэтому предлагаю добавить умение, с помощью которого игрок сможет уничтожить все блоки, располагающиеся выше какого-то
  значения (земли)
Это основное, потом можно добавить что-то более интересное
Задачи, связанные с этой сценой, если принимаем условия выше:
- описать физику блоков
- написать алгоритм генерации карты
- вёрстка блоков
- добавление фигурки
- описание физики фигурки
- описание физики движения фигурки
- добавление элементов управления для фигурки (влево, вправо, прыжок, умение)
- код для подмены клавиш свёрстанными кнопками
- описание умения + соединение с соотвествующим элементом управления
- добавление движения камеры
- добавление счётчика
  - 1 вариант:
    - добавление собираемых элементов
    - описание их физики и взаимодействия с фигуркой
    - алгоритм счёта
    - (?) добавление звука взаимодействия собираемых элементов и фигурки
  - 2 вариант:
    - ваши предложения по счёту блоков
- добавление условия окончания игры
  - добавление условия падения ниже края карты
  - (?) добавление условия соприкосновения фигурки с левым краем карты
- переход на следующую сцену
- добавление логики для паузы по время клика по игровому меню
- вёрстка игрового меню
  - музыка
  - рестарт
- перенос логики включения/выключения музыка
- логика рестарта

3. Окончание игры
Задачи, связанные с этой сценой:
- вёрстка блока с результатами
  - кнопка рестарта
  - вывод счётчика
- описание логики рестарта и соединение с соответствующей кнопкой

РАБОТА С GIT
------------
По шагам.

1. Клонируем репозиторий к себе на комп (команда git clone)
2. git checkout -b *название-ветки*
   Эта команда создаст новую ветку, в которой можно будет работать отдельно от общего проекта.
   В названии ветки лучше всего использовать ту задачу, которую в ней выполняете.
3. Коммитите туда.
   Если первый раз пушите на ветку, гит выдаст ошибку с предложением использовать другую команду.
   Нужно скопировать её в терминал и выполнить.
4. Когда закончите выполнение задачи, на главной странице репозитория на GitHub будет предложение смержить вашу ветку с главной.
   Создаёте пуллреквест.
   Изучаете вывод тестов. Если что-то не так, нужно исправить.
   Когда всё так, одобряете пуллреквест.
   Дальше нужно будет написать краткое описание.
5. git pull обновляет ваш локальный репозиторий и скачивает изменения с GitHub. 

ПАМЯТКА ПО ИСПОЛЬЗУЕМОМУ ФУНКЦИОНАЛУ
------------------------------------
Вся игра состоит из сцен - игровых фреймов. У сцены есть три обязательных метода: preload, create, update. Они описаны ниже.
Объявление сцены:
export default class *название-класса* extends Phaser.Scene {
  constructor() {
    // задаём сцене название
    super('название-сцены')
  }

  // вот в это пространство можно поместить свойства сцены, занятые какими-либо игровыми объектами
  // игровые объекты можно записывать в свойства для удобства, но это не обязательно
  игровойОбъект,

  // сюда добавляется то, что нужно предзагрузить для создания сцены
  preload() {
    // здесь мы всё загружаем, поэтому load
    this.игровойОбъект.load.image('рабочее-название-изображения', 'абсолютный/путь/до/изображения');

  }

  // здесь описывается логика создания сцены: что где должно находиться и как оно должно себя вести
  // всё это выполнится ровно один раз при создании сцены
  create() {}

  // то, что находится здесь, будет выполняться при каждом обновлении фрейма
  update() {
    // ко всему, чем мы пользуемся внутри сцены, мы можем обращаться через this
    this.необязательныйМетод();
  }

  // сюда можно поместить необязательные методы, которые мы добавляем для удобства
  необязательныйМетод() {
    alert('frankly, ive never watched Evangelion');
  }
}
Соответственно, если мы хотим что-то сделать с чем-то внутри сцены, мы можем сделать это так:
this.что-то.сделайМетодКоторыйЯСоздал();
или так:
this.что-то.setScale(0.7); (из стандартной библиотеки)

По большей части нам нужны только events, которые описаны вот здесь: https://newdocs.phaser.io/docs/3.60.0/events
